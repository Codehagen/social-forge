
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  agent         Boolean   @default(false)
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  // Onboarding
  onboardingCompleted Boolean  @default(false)
  onboardingData      Json?

  // Relations
  sessions      Session[]
  accounts      Account[]
  workspaces    WorkspaceMember[]
  invitationsSent WorkspaceInvitation[]

  // Default workspace
  defaultWorkspaceId String?
  defaultWorkspace   Workspace? @relation("UserDefaultWorkspace", fields: [defaultWorkspaceId], references: [id], onDelete: SetNull)
  sitesCreated          Site[] @relation("SiteCreator")
  siteDomainsAdded      SiteDomain[] @relation("SiteDomainAddedBy")
  siteVersionsCreated   SiteVersion[] @relation("SiteVersionCreator")
  siteDeploymentsTriggered SiteDeployment[] @relation("SiteDeploymentTriggeredBy")
  builderSessions       BuilderSession[]
  siteCollaboratorInvites SiteCollaborator[] @relation("SiteCollaboratorInviter")
  siteTransfersInitiated SiteTransfer[] @relation("TransferInitiator")
  siteTransfersAccepted  SiteTransfer[] @relation("TransferAcceptor")
  prospectReviewsCreated ProspectReview[] @relation("ProspectReviewCreator")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Active workspace context
  activeWorkspaceId String?
  activeWorkspace   Workspace? @relation(fields: [activeWorkspaceId], references: [id], onDelete: SetNull)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Workspace model for multi-tenancy
model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  image       String?

  // Business contact information
  businessName  String?
  businessEmail String?
  businessPhone String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     WorkspaceMember[]
  invitations WorkspaceInvitation[]
  sessions    Session[]
  defaultForUsers User[] @relation("UserDefaultWorkspace")
  sites        Site[]
  builderSites Site[] @relation("SiteBuilderWorkspace")
  clients      Client[]
  siteCollaborations SiteCollaborator[]
  siteTransfersFrom SiteTransfer[] @relation("TransferFromWorkspace")
  siteTransfersTo   SiteTransfer[] @relation("TransferToWorkspace")
  builderSessions   BuilderSession[]

  @@map("workspace")
}

// Junction table for user-workspace relationship
model WorkspaceMember {
  id          String   @id @default(cuid())
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  // Relations
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_member")
}

// Workspace invitation model
model WorkspaceInvitation {
  id          String   @id @default(cuid())
  email       String
  role        Role     @default(MEMBER)
  token       String   @unique @default(cuid())
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())

  // Relations
  workspaceId String
  invitedById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation(fields: [invitedById], references: [id])

  @@index([email])
  @@index([workspaceId])
  @@map("workspace_invitation")
}

// Role enum for workspace members
enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Client {
  id          String   @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name        String
  contactName String?
  contactEmail String?
  metadata    Json?
  sites       Site[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Site {
  id                 String   @id @default(cuid())
  workspaceId        String
  workspace          Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  builderWorkspaceId String?
  builderWorkspace   Workspace? @relation("SiteBuilderWorkspace", fields: [builderWorkspaceId], references: [id], onDelete: SetNull)
  clientId           String?
  client             Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  createdById        String?
  createdBy          User?     @relation("SiteCreator", fields: [createdById], references: [id], onDelete: SetNull)
  name               String
  slug               String   @unique
  status             SiteStatus @default(DRAFT)
  brief              Json?
  metadata           Json?
  activeVersionId    String? @unique
  activeVersion      SiteVersion? @relation("SiteActiveVersion", fields: [activeVersionId], references: [id], onDelete: SetNull)
  environments       SiteEnvironment[]
  versions           SiteVersion[]
  transfers          SiteTransfer[]
  collaborators      SiteCollaborator[]
  builderSessions    BuilderSession[]
  prospectReviews    ProspectReview[]
  subdomainAssignment SubdomainAssignment?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  archivedAt         DateTime?

  @@index([workspaceId])
  @@index([builderWorkspaceId])
  @@index([clientId])
}

model SiteEnvironment {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  type              SiteEnvironmentType
  name              String
  vercelProjectId   String?
  vercelTeamId      String?
  vercelProjectName String?
  lastSyncedAt      DateTime?
  configuration     Json?
  domains           SiteDomain[]
  deployments       SiteDeployment[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([siteId])
  @@unique([siteId, type])
}

model SiteDomain {
  id                String   @id @default(cuid())
  environmentId     String
  environment       SiteEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  domain            String
  isPrimary         Boolean @default(false)
  status            DomainStatus @default(PENDING_VERIFICATION)
  vercelDomainId    String?
  vercelConfigurationId String?
  verificationToken String?
  verificationMethod String?
  dnsRecords        Json?
  verificationRecords Json?
  verifiedAt        DateTime?
  lastCheckedAt     DateTime?
  failedAt          DateTime?
  errorMessage      String?
  addedById         String?
  addedBy           User?     @relation("SiteDomainAddedBy", fields: [addedById], references: [id], onDelete: SetNull)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([environmentId, domain])
  @@index([domain])
}

model SiteVersion {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  number            Int
  label             String?
  status            SiteStatus @default(DRAFT)
  manifest          Json?
  archiveStorageKey String?
  sandboxProvider   SandboxProvider?
  sandboxId         String?
  conversationState Json?
  createdById       String?
  createdBy         User?     @relation("SiteVersionCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt         DateTime @default(now())
  deployments       SiteDeployment[]
  activeOnSite      Site?    @relation("SiteActiveVersion")
  builderSessionsInitial  BuilderSession[] @relation("BuilderSessionInitialVersion")
  builderSessionsResulting BuilderSession[] @relation("BuilderSessionResultingVersion")

  @@unique([siteId, number])
  @@index([siteId])
}

model SiteDeployment {
  id                 String   @id @default(cuid())
  environmentId      String
  environment        SiteEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  versionId          String?
  version            SiteVersion? @relation(fields: [versionId], references: [id], onDelete: SetNull)
  vercelDeploymentId String
  url                String
  status             DeploymentStatus @default(QUEUED)
  triggeredById      String?
  triggeredBy        User?     @relation("SiteDeploymentTriggeredBy", fields: [triggeredById], references: [id], onDelete: SetNull)
  requestedAt        DateTime @default(now())
  completedAt        DateTime?
  metadata           Json?

  @@index([environmentId])
  @@index([versionId])
}

model BuilderSession {
  id                 String   @id @default(cuid())
  siteId             String?
  site               Site?    @relation(fields: [siteId], references: [id], onDelete: SetNull)
  workspaceId        String
  workspace          Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String?
  user               User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  status             BuilderSessionStatus @default(ACTIVE)
  provider           SandboxProvider
  sandboxId          String?
  initialVersionId   String?
  initialVersion     SiteVersion? @relation("BuilderSessionInitialVersion", fields: [initialVersionId], references: [id], onDelete: SetNull)
  resultingVersionId String?
  resultingVersion   SiteVersion? @relation("BuilderSessionResultingVersion", fields: [resultingVersionId], references: [id], onDelete: SetNull)
  conversationState  Json?
  promptSummary      String?
  startedAt          DateTime @default(now())
  endedAt            DateTime?

  @@index([workspaceId])
  @@index([siteId])
}

model SiteCollaborator {
  id           String   @id @default(cuid())
  siteId       String
  site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role         SiteCollaboratorRole @default(EDITOR)
  invitedById  String?
  invitedBy    User?     @relation("SiteCollaboratorInviter", fields: [invitedById], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())

  @@unique([siteId, workspaceId])
}

model SiteTransfer {
  id              String   @id @default(cuid())
  siteId          String
  site            Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  fromWorkspaceId String
  fromWorkspace   Workspace @relation("TransferFromWorkspace", fields: [fromWorkspaceId], references: [id], onDelete: Cascade)
  toWorkspaceId   String
  toWorkspace     Workspace @relation("TransferToWorkspace", fields: [toWorkspaceId], references: [id], onDelete: Cascade)
  status          SiteTransferStatus @default(PENDING)
  initiatedById   String
  initiatedBy     User     @relation("TransferInitiator", fields: [initiatedById], references: [id], onDelete: Cascade)
  acceptedById    String?
  acceptedBy      User?    @relation("TransferAcceptor", fields: [acceptedById], references: [id], onDelete: SetNull)
  initiatedAt     DateTime @default(now())
  completedAt     DateTime?
  cancelledAt     DateTime?
  notes           String?

  @@index([siteId])
  @@index([fromWorkspaceId])
  @@index([toWorkspaceId])
}

enum SiteStatus {
  DRAFT
  REVIEW
  READY_FOR_TRANSFER
  LIVE
  ARCHIVED
}

enum SiteEnvironmentType {
  DEVELOPMENT
  PREVIEW
  PRODUCTION
}

enum DeploymentStatus {
  QUEUED
  BUILDING
  READY
  FAILED
  CANCELLED
}

enum DomainStatus {
  PENDING_VERIFICATION
  VERIFYING
  ACTIVE
  FAILED
  REMOVED
}

enum SiteTransferStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  EXPIRED
}

enum SiteCollaboratorRole {
  OWNER
  EDITOR
  VIEWER
}

enum BuilderSessionStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  FAILED
}

enum SandboxProvider {
  VERCEL
  E2B
  LOCAL
}

model ProspectReview {
  id                String   @id @default(cuid())
  siteId            String
  site              Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  prospectEmail     String
  prospectName      String?
  shareToken        String   @unique @default(cuid())
  status            ProspectReviewStatus @default(PENDING)
  message           String?
  requestedDomain   String?
  companyName       String?
  contactPhone      String?
  additionalInfo    Json?
  approvedAt        DateTime?
  declinedAt        DateTime?
  viewedAt          DateTime?
  detailsSubmittedAt DateTime?
  feedback          String?
  expiresAt         DateTime?
  createdById       String?
  createdBy         User?     @relation("ProspectReviewCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([siteId])
  @@index([shareToken])
  @@index([prospectEmail])
  @@map("prospect_review")
}

enum ProspectReviewStatus {
  PENDING
  VIEWED
  APPROVED
  DETAILS_SUBMITTED
  DEPLOYING
  LIVE
  DECLINED
  EXPIRED
}

model SubdomainAssignment {
  id          String   @id @default(cuid())
  siteId      String   @unique
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  subdomain   String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([subdomain])
  @@map("subdomain_assignment")
}

// Full Coding Agent Template Models (adapted from Drizzle to Prisma)
model CodingAgentUser {
  id            String   @id @default(cuid())
  // Primary OAuth account info (how they signed in)
  provider      String   // github or vercel
  externalId    String   // External ID from OAuth provider
  accessToken   String   // Encrypted OAuth access token
  refreshToken  String?  // Encrypted OAuth refresh token
  scope         String?
  // Profile info
  username      String
  email         String?
  name          String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  lastLoginAt   DateTime @default(now())

  // Relations
  tasks         CodingTask[]
  accounts      CodingAgentAccount[]
  apiKeys       CodingAgentApiKey[]
  connectors    CodingConnector[]
  taskMessages  CodingTaskMessage[]
  settings      CodingSetting[]

  @@unique([provider, externalId])
  @@map("coding_agent_users")
}

model CodingAgentAccount {
  id            String   @id @default(cuid())
  userId        String
  user          CodingAgentUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider      String   @default("github") // Only GitHub for additional accounts
  externalUserId String  // GitHub user ID
  accessToken   String   // Encrypted OAuth access token
  refreshToken  String?  // Encrypted OAuth refresh token
  expiresAt     DateTime?
  scope         String?
  username      String   // GitHub username
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@unique([userId, provider])
  @@map("coding_agent_accounts")
}

model CodingAgentApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      CodingAgentUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  String   // anthropic, openai, cursor, gemini, aigateway
  value     String   // Encrypted API key value
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, provider])
  @@map("coding_agent_api_keys")
}

model CodingConnector {
  id             String   @id @default(cuid())
  userId         String
  user           CodingAgentUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  type           CodingConnectorType @default(REMOTE)
  // For remote MCP servers
  baseUrl        String?
  oauthClientId  String?
  oauthClientSecret String?
  // For local MCP servers
  command        String?
  // Environment variables (for both local and remote) - stored encrypted
  env            String?
  status         CodingConnectorStatus @default(DISCONNECTED)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@map("coding_connectors")
}

model CodingTaskMessage {
  id        String   @id @default(cuid())
  taskId    String
  task      CodingTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  role      CodingMessageRole // user or agent
  content   String   // The message content
  createdAt DateTime @default(now())

  // Add relation to user through task
  userId    String
  user      CodingAgentUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("coding_task_messages")
}

model CodingSetting {
  id        String   @id @default(cuid())
  userId    String
  user      CodingAgentUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  key       String   // Setting key (e.g., 'maxMessagesPerDay')
  value     String   // Setting value (stored as text)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, key])
  @@map("coding_settings")
}

// Coding Tasks (using CodingAgentUser - full template schema)
model CodingTask {
  id            String   @id @default(cuid())
  userId        String
  user          CodingAgentUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  prompt        String
  repoUrl       String?
  agent         String   @default("claude") // claude, openai, cursor, gemini, opencode
  model         String?
  installDependencies Boolean @default(false)
  maxDuration   Int     @default(300)
  keepAlive     Boolean @default(false)
  status        CodingTaskStatus @default(PENDING)
  progress      Int      @default(0)

  // Results
  logs          Json?    // Array of log entries
  error         String?
  branchName    String?
  sandboxId     String?
  agentSessionId String?
  sandboxUrl    String?
  previewUrl    String?
  prUrl         String?
  prNumber      Int?
  prStatus      CodingPRStatus?
  prMergeCommitSha String?
  mcpServerIds  Json?    // Array of MCP server IDs

  // Relations
  messages      CodingTaskMessage[]

  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  deletedAt     DateTime?

  @@index([userId])
  @@index([status])
  @@map("coding_tasks")
}

enum CodingTaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  STOPPED
}

enum CodingConnectorType {
  LOCAL
  REMOTE
}

enum CodingConnectorStatus {
  CONNECTED
  DISCONNECTED
}

enum CodingMessageRole {
  USER
  AGENT
}

enum CodingPRStatus {
  OPEN
  CLOSED
  MERGED
}
